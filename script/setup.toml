##############################
# CI                         #
##############################
[tasks.github-actions]
dependencies = [
    "package_manager",
    "dependencies",
    # "install_git_github-actions",
    # "dotfiles",
    # "install_alacritty",
    # "install_tmux",
    # "install_fish",
    # "install_fzf",
    # "install_starship",
    # "install_anyenv",
    # "setup_python",
    # "setup_go",
    # "setup_node",
    # "setup_rust",
    # "install_clitools",
    # "setup_neovim",
]

[tasks.install_git_github-actions]
dependencies = ["git", "git_link"]

##############################
# Setup                      #
##############################
[tasks.setup]
dependencies = [
    "package_manager",
    "install_git",
    "dotfiles",
    "setup_fonts",
    "install_alacritty",
    "install_tmux",
    "install_fish",
    "install_fzf",
    "install_starship",
    "install_anyenv",
    "setup_python",
    "setup_go",
    "setup_node",
    "setup_rust",
    "install_clitools",
    "setup_neovim",
]

[tasks.links]
dependencies = [
    "git_link",
    "alacritty_link",
    "tmux_link",
    "fish_links",
    "starship_link",
    "neovim_link",
]

[tasks.dependencies.mac]
script = [
'''
#!/usr/bin/env bash

brew intall readline xz
'''
]

[tasks.dependencies.linux]
script = [
'''
#!/usr/bin/env bash

sudo apt install -y automake bison build-essential cmake curl \
git libbz2-dev libevent-dev libffi-dev libfreetype6-dev \
libfontconfig1-dev liblzma-dev libncursesw5-dev libreadline-dev \
libsqlite3-dev libssl-dev libxcb-xfixes0-dev llvm make \
pkg-config python-openssl python3 tk-dev  wget xz-utils zlib1g-dev
'''
]

##############################
# Homebrew / Linuxbrew       #
##############################
[tasks.package_manager.mac]
script = [
'''
#!/usr/bin/env bash

/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
'''
]

##############################
# Git                        #
##############################
[tasks.install_git]
dependencies = ["git", "git_link", "gen_ssh-key"]

[tasks.git.mac]
script = [
'''
#!/usr/bin/env bash

if (brew list | grep git > /dev/null); then
    brew upgrade git
else
    brew install git
fi
'''
]

[tasks.git.linux]
script = [
'''
#!/usr/bin/env bash

sudo add-apt-repository -y ppa:git-core/ppa
sudo apt update -y
sudo apt install -y git
'''
]

[tasks.git_link]
script = [
'''
#!/usr/bin/env bash

ln -snfv ~/dotfiles/git ~/.config
'''
]

[tasks.gen_ssh-key]
condition = { env_set = [ "EMAIL_ADDRESS" ] }
script = [
'''
#!/usr/bin/env bash

ssh-keygen -t ed25519 -C $MAIL_ADDRESS
'''
]

##############################
# dotfiles                   #
##############################
[tasks.dotfiles]
script = [
'''
#!/usr/bin/env bash

git clone https://github.com/pyama2000/dotfiles.git ~/dotfiles
cd ~/dotfiles
git remote set-url origin git@github.com:pyama2000/dotfiles.git
'''
]

##############################
# fonts                      #
##############################
[tasks.setup_fonts]
dependencies = ["source-code-pro"]

[tasks.source-code-pro_install]
script = [
'''
#!/usr/bin/env bash

if [ ! -d "~/.fonts" ] ; then
    mkdir ~/.fonts
fi

mkdir -p ~/.fonts/adobefont/source-code-pro

mkdir -p /tmp/adobefont
cd /tmp/adobefont

curl -LO https://github.com/adobe-fonts/source-code-pro/archive/release.zip
unzip release.zip
mv source-code-pro-release/* ~/.fonts/adobefont/source-code-pro

cd ../
rm -rf adobefont
'''
]

[tasks.source-code-pro.mac]
script = [
'''
#!/usr/bin/env bash

cp -a ~/.fonts/adobefont/source-code-pro/TTF/* ~/Library/Fonts
'''
]
dependencies = ["source-code-pro_install"]

[tasks.source-code-pro.linux]
script = [
'''
#!/usr/bin/env bash

fc-cache -f -v ~/.fonts/adobefont/source-code-pro
'''
]
dependencies = ["source-code-pro_install"]

##############################
# Alacritty                  #
##############################
[tasks.install_alacritty]
dependencies = ["alacritty", "alacritty_link"]

[tasks.alacritty.mac]
script = [
'''
#!/usr/bin/env bash

brew cask install alacritty
'''
]

[tasks.alacritty.linux]
script = [
'''
#!/usr/bin/env bash

sudo add-apt-repository ppa:mmstick76/alacritty
sudo apt install -y alacritty
'''
]

[tasks.alacritty_dependencies.linux]
script = [
'''
#!/usr/bin/env bash

sudo apt install -y git automake bison build-essential pkg-config libevent-dev libncurses5-dev
'''
]

[tasks.alacritty_link]
script = [
'''
#!/usr/bin/env bash

ln -snfv ~/dotfiles/.config/alacritty ~/.config
'''
]

##############################
# tmux                       #
##############################
[tasks.install_tmux]
dependencies = ["tmux", "tmux_link"]

[tasks.tmux.mac]
script = [
'''
#!/usr/bin/env bash

brew install tmux
'''
]

[tasks.tmux.linux]
script = [
'''
#!/usr/bin/env bash

sudo apt install tmux
'''
]

[tasks.tmux_dependencies.linux]
script = [
'''
#!/usr/bin/env bash

sudo apt install -y cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev python3
'''
]

[tasks.tmux_link]
script = [
'''
#!/usr/bin/env bash

ln -snfv ~/dotfiles/.tmux.conf ~/
'''
]

##############################
# fish shell                 #
##############################
[tasks.install_fish]
dependencies = ["fish", "fish_plugin", "fish_links"]

[tasks.fish.mac]
script = [
'''
#!/usr/bin/env bash

brew install fish
'''
]

[tasks.fish.linux]
script = [
'''
#!/usr/bin/env bash

sudo apt-add-repository -y ppa:fish-shell/release-3
sudo apt update -y
sudo apt install -y fish
'''
]

[tasks.fish_plugin]
script = [
'''
#!/usr/bin/env bash

curl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish
fish -c "fisher add jethrokuan/z"
'''
]

[tasks.fish_links]
script = [
'''
#!/usr/bin/env bash

ln -snfv ~/dotfiles/.config/fish/config.fish ~/.config/fish
ln -snfv ~/dotfiles/.config/fish/functions/* ~/.config/fish/functions
ln -snfv ~/dotfiles/.config/fish/completions/* ~/.config/fish/completions
'''
]

##############################
# fzf                        #
##############################
[tasks.install_fzf]
dependencies = ["fzf"]

[tasks.fzf.mac]
script = [
'''
#!/usr/bin/env bash

brew install fzf
yes | /usr/local/opt/fzf/install
'''
]

[tasks.fzf.linux]
script = [
'''
#!/usr/bin/env bash

git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
yes | ~/.fzf/install
'''
]

##############################
# starship                   #
##############################
[tasks.install_starship]
dependencies = ["starship", "starship_link"]

[tasks.starship]
script = [
'''
#!/usr/bin/env bash

cargo install starship
'''
]

[tasks.starship_link]
script = [
'''
#!/usr/bin/env bash

ln -snfv ~/dotfiles/.config/starship.toml ~/.config/
'''
]

##############################
# CLI tools                  #
##############################
[tasks.install_clitools]
dependencies = ["clitools", "clitools_from_cargo"]

[tasks.clitools.mac]
script = [
'''
#!/usr/bin/env bash

brew install ghq jq
'''
]

[tasks.clitools.linux]
script = [
'''
#!/usr/bin/env bash

sudo apt install -y jq

source ~/.profile
go get github.com/x-motemen/ghq
'''
]

[tasks.clitools_from_cargo]
script = [
'''
#!/usr/bin/env bash

cargo install bat exa hyperfine ripgrep tokei zoxide
'''
]

##############################
# anyenv                     #
##############################
[tasks.install_anyenv]
dependencies = ["anyenv", "anyenv_init", "anyenv_plugin"]

[tasks.anyenv.mac]
script = [
'''
#!/usr/bin/env bash

brew install anyenv
echo 'eval "$(anyenv init -)"' >> ~/.profile
'''
]

[tasks.anyenv.linux]
script = [
'''
#!/usr/bin/env bash

git clone https://github.com/anyenv/anyenv ~/.anyenv
echo 'export PATH="$HOME/.anyenv/bin:$PATH"' >> ~/.profile
echo 'eval "$(anyenv init -)"' >> ~/.profile
'''
]

[tasks.anyenv_init]
script = [
'''
#!/usr/bin/env bash

if !(type anyenv > /dev/null 2>&1); then
    source ~/.profile
fi

yes | anyenv install --init
'''
]

[tasks.anyenv_plugin]
script = [
'''
#!/usr/bin/env bash

if !(type anyenv > /dev/null 2>&1); then
    source ~/.profile
fi

mkdir -p $(anyenv root)/plugins
git clone https://github.com/znz/anyenv-update.git $(anyenv root)/plugins/anyenv-update
git clone https://github.com/znz/anyenv-git.git $(anyenv root)/plugins/anyenv-git
'''
]

##############################
# Rust                       #
##############################
[tasks.setup_rust]
dependencies = ["components", "cargo-tools", "rust-analyzer"]

[tasks.components]
script = [
'''
rustup component add clippy rustfmt rust-src
'''
]

[tasks.cargo-tools]
script = [
'''
cargo install cargo-update cargo-watch
'''
]

[tasks.rust-analyzer]
script = [
'''
#!/usr/bin/env bash

git clone https://github.com/rust-analyzer/rust-analyzer.git ~/rust-analyzer
cd ~/rust-analyzer
cargo xtask install --server
'''
]

##############################
# Python                     #
##############################
[tasks.setup_python]
dependencies = ["python_dependencies", "pyenv", "python", "pipenv"]

[tasks.python_dependencies.mac]
script = [
'''
#!/usr/bin/env bash

if (brew list | grep readline > /dev/null); then
    brew upgrade readline
else
    brew install readline
fi

if (brew list | grep readline > /dev/null); then
    brew upgrade xz
else
    brew install xz
fi
'''
]

[tasks.python_dependencies.linux]
script = [
'''
#!/usr/bin/env bash

sudo apt install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
'''
]

[tasks.pyenv]
script = [
'''
#!/usr/bin/env bash

if !(type anyenv > /dev/null 2>&1); then
    source ~/.profile
fi

anyenv install pyenv
'''
]

[tasks.python]
script = [
'''
#!/usr/bin/env bash

if !(type pyenv > /dev/null 2>&1); then
    source ~/.profile
fi

pyenv install 3.8.2
pyenv global 3.8.2
'''
]

[tasks.pipenv]
script = [
'''
#!/usr/bin/env bash

source ~/.profile
pip install pipenv
'''
]

##############################
# Go                         #
##############################
[tasks.setup_go]
dependencies = ["goenv", "go"]

[tasks.goenv]
script = [
'''
#!/usr/bin/env bash

if !(type anyenv > /dev/null 2>&1); then
    source ~/.profile
fi

anyenv install goenv
'''
]

[tasks.go]
script = [
'''
#!/usr/bin/env bash

if !(type goenv > /dev/null 2>&1); then
    source ~/.profile
fi

goenv install 1.14.2
goenv global 1.14.2

echo 'export GOPATH="$HOME/go"' >> ~/.profile
echo 'export PATH="$GOPATH/bin:$PATH"' >> ~/.profile
echo 'export GOENV_DISABLE_GOPATH="1"' >> ~/.profile
'''
]

##############################
# Node                       #
##############################
[tasks.setup_node]
dependencies = ["nodenv", "node"]

[tasks.nodenv]
script = [
'''
#!/usr/bin/env bash

if !(type anyenv > /dev/null 2>&1); then
    source ~/.profile
fi

anyenv install nodenv
'''
]

[tasks.node]
script = [
'''
#!/usr/bin/env bash

if !(type nodenv > /dev/null 2>&1); then
    source ~/.profile
fi

touch $(nodenv root)/default-packages
nodenv install 12.16.3
nodenv global 12.16.3
'''
]

##############################
# Neovim                     #
##############################
[tasks.setup_neovim]
dependencies = ["neovim", "provider", "dein", "neovim_link"]

[tasks.neovim.mac]
script = [
'''
#!/usr/bin/env bash

brew install neovim
'''
]

[tasks.neovim.linux]
script = [
'''
#!/usr/bin/env bash

sudo apt install -y neovim
'''
]

[tasks.provider]
script = [
'''
#!/usr/bin/env bash

pip install pynvim
'''
]

[tasks.dein]
script = [
'''
#!/usr/bin/env bash

curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > ~/installer.sh
sh ~/installer.sh ~/.cache/dein
rm ~/installer.sh
'''
]

[tasks.neovim_link]
script = [
'''
#!/usr/bin/env bash

if [ ! -d "~/.config/coc/extensions" ] ; then
    mkdir -p ~/.config/coc/extensions
fi

ln -snfv ~/dotfiles/.config/nvim ~/.config
ln -snfv ~/dotfiles/.config/coc/extensions/package.json ~/.config/coc/extensions
'''
]
